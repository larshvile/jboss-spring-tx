/*
 * Creates an installer for snowdrop, the Spring deployer.
 */
apply plugin: 'base'
applyHulteScript "versions"

snowdropVersion = '2.0.1.Final'

dependencies {
    archives "org.jboss.snowdrop:snowdrop-subsystem-as7:$snowdropVersion@zip"
}


staging = file("$buildDir/staging")


task createStagingDir(type: Directory) {
    dir = staging
}


task downloadDist(type: Copy) {
   from configurations.archives
   into staging.parentFile
}


task explodeDist(type: Copy, dependsOn: [createStagingDir, downloadDist]) {
    from zipTree(new File(buildDir, "snowdrop-subsystem-as7-${snowdropVersion}.zip"))
    into new File(staging, "modules")
}


import groovy.xml.*
task updateModuleDescriptor(dependsOn: explodeDist) << {
    def file = file("$buildDir/staging/modules/org/jboss/snowdrop/main/module.xml")
    def module = new XmlSlurper(false, false).parse(file)
    def dependencies = module.dependencies

    // remove the existing Spring module
    def springModule = dependencies.module.find { it.@name == 'org.springframework.spring' }
    assert springModule.size() == 1
    springModule.each { it.replaceNode {} }

    // replace with the custom spring module, and full imports/exports (as opposed to META-INF/** & org/**)
    dependencies.appendNode({
        delegate.'module'(name:'org.springframework', export:'true') {
            imports { // import everything including META-INF
                include(path: '**')
            }
            exports { // .. and export it
                include(path: '**')
            }
        }
    })

    file.withWriter('UTF-8') {
        XmlUtil.serialize(module, it)
    }
}


task addInitScript(type: Copy, dependsOn: explodeDist) {
    from file('init.cli')
    into file("$buildDirName/staging/hulte-scripts/org.jboss.snowdrop")
}


task dist(type: Tar, dependsOn: [updateModuleDescriptor, addInitScript]) {
    from staging
    compression = Compression.GZIP
}


artifacts {
    archives dist
}

assemble.dependsOn dist
uploadArchives.dependsOn assemble

