/*
 * Provides support for the proprietary aspects of JBoss deployments.
 * https://docs.jboss.org/author/display/AS7/Class+Loading+in+AS7
 */
ext {
    jbossModuleDependencies = []
    jbossDeploymentDescriptor = file("${buildDir.name}/jboss-deployment-structure.xml")
}

/*
 * Generates JBoss' deployment descriptor, jboss-deployment-structure.xml, as desribed in:
 * https://docs.jboss.org/author/display/AS7/Class+Loading+in+AS7#ClassLoadinginAS7-JBossDeploymentStructureFile
 */
import groovy.xml.*
classes.dependsOn('generateJBossDeploymentDescriptor')
task generateJBossDeploymentDescriptor() << {
    def encoding = 'UTF-8'

    def builder = new StreamingMarkupBuilder()
    builder.encoding = encoding

    def descriptor = builder.bind {
        mkp.xmlDeclaration()
        'jboss-deployment-structure'(xmlns: 'urn:jboss:deployment-structure:1.0') {
            deployment() {

                // module dependencies
                delegate.'dependencies'() {
                    jbossModuleDependencies.each { d ->
                        if (d instanceof Map) {
                            delegate.'module'(name: d['name']) {
                                if (d['include']) {
                                    delegate.'imports'() {
                                        delegate.'include'(path: d['include']) {}
                                    }
                                }
                            }
                        } else {
                            delegate.'module'(name: d) {}
                        }
                    }
                }
            }
        }
    }

    jbossDeploymentDescriptor.withWriter(encoding) {
        XmlUtil.serialize(descriptor, it)
    }
}

/*
 * Embeds the descriptor within WEB-INF of the war.
 */
if (tasks.findByName('war')) {
    war {
        webInf {
            from jbossDeploymentDescriptor
        }
    }
}

/*
 * .. or within META-INF of regular jars.
 */
else {
    metaInf << jbossDeploymentDescriptor
}

