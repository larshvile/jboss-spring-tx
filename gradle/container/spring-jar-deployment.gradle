/*
 * Creates a deployable archive for a Spring component. JBoss has support for this through the Snowdrop
 * extension. An alternative could be to generate WEB-INF/web.xml & package it as a .war.
 */
applyHulteScript "java"

def snowdropDeploymentDescriptor = file("${buildDir.name}/jboss-spring.xml")

jar {
    extension = 'spring'
    metaInf {
        from snowdropDeploymentDescriptor
    }
}

// custom dependency configuration for dependencies provided by JBoss. Emulates 'providedCompile' for regular WARs
configurations {
    providedCompile {
        description = 'dependencies provided by JBoss'
    }
    compile {
        extendsFrom providedCompile
    }
}

/**
 * Generates the snowdrop-specific deployment descriptor, 'jboss-spring.xml'. Simple spring-xml which by
 * convention delegates to META-INF/applicationContext.xml.
 */
jar.dependsOn 'createSnowdropDeploymentDescriptor'
task createSnowdropDeploymentDescriptor() << {
    def descriptor = 

'''<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="no" xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <import resource="applicationContext.xml" />
</beans>'''

    snowdropDeploymentDescriptor.withWriter('UTF-8') {
        it.write(descriptor)
    }
}

