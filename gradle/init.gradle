// symlink into $HOME/.gradle/init.d/ or invoke 'gradle --init-script $checkoutPath/gradle/init.gradle'


/**
 * Invokes a closure against each project after its definition has been loaded, but before it's evaluted.
 * 'beforeProject' is supposed to do this, but it's in fact invoked after evaluation for some reason.
 * TODO this may be a Gradle bug?? Or maybe just a misunderstanding of 'evalution'. beforeProject is called
 * after the scripts have been parsed(evaulated), but prior to any tasks being run..
 */
def reallyBeforeProject(def action) {
    gradle.projectsLoaded {
        rootProject.allprojects {
            action(delegate)
        }
    }
}


/*
 * Repositories
 */
reallyBeforeProject { p -> // TODO regular beforeProject is probably ok
    p.repositories {
        mavenLocal()
        mavenRepo name: "jboss-releases", url: "https://repository.jboss.org/nexus/content/repositories/releases"
        mavenCentral()
    }
}


/*
 * Use the good old 'target' directory for build output.
 */
reallyBeforeProject { it.buildDir = it.file('target') }


/**
 * Define a standard versioning scheme for artifacts under continous development.
 */
reallyBeforeProject { it.CURR = 'CURRENT-SNAPSHOT' }


/*
 * Locate this file's parent directory, 'gradle'
 */
final File scriptFolder = buildscript.sourceFile.canonicalFile.parentFile


/*
 * Install conventions for loading shared scripts without too much clutter.
 */
class HulteScriptConvention {
  final def project
  final File scriptFolder;

  HulteScriptConvention(def project, File scriptFolder) {
    this.project = project // TODO can this be avoided? Any way of finding the 'current' project dynamically?
    this.scriptFolder = scriptFolder
  }

  def applyHulteScript(String script) {
    if (!project.hasProperty('appliedHulteScripts')) {
        project.appliedHulteScripts = []
    }

    if (!project.appliedHulteScripts.contains(script)) {
        project.apply from: new File(scriptFolder, script + ".gradle")
        project.appliedHulteScripts << script
    }
  }
}

reallyBeforeProject { p ->
    p.convention.plugins.hulteScript = new HulteScriptConvention(p, scriptFolder);
}


/*
 * Install the global repository for binaries.
 */
afterProject { p ->
    if (!p.getTasksByName('uploadArchives', false).empty) {
        p.uploadArchives {
            repositories {
                add flatDir {
                    name "bin-repo"
                    dirs new File(scriptFolder.parent, "bin")
                }
            }
        }
    }
}

