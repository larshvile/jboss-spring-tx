/*
 * Provides a baseline script for creating JBoss modules.
 * https://docs.jboss.org/author/display/AS7/Class+Loading+in+AS7
 */
apply plugin: 'base'

defaultTasks 'clean', 'uploadArchives'

// client-provided configuration
moduleName = name
moduleSlot = 'main'
moduleDependencies = []
configurations {
    jboss // dependency configuration for the module's contents
}


staging = file("$buildDir/staging")
task createStagingDir(type: Directory) {
    dir = staging
}


/*
 * Copies all dependencies into the staging folder.
 */
task assembleModuleDependencies(type: Copy, dependsOn: createStagingDir) {
   from configurations.jboss
   into staging
}


/*
 * Writes a JBoss module descriptor into the staging folder.
 */
import groovy.xml.*
task createModuleDescriptor(dependsOn: createStagingDir) << {
    def encoding = 'UTF-8'

    def builder = new StreamingMarkupBuilder()
    builder.encoding = encoding

    def descriptor = builder.bind {
        mkp.xmlDeclaration()
        module(xmlns: 'urn:jboss:module:1.0', name: moduleName, slot: moduleSlot) {
            delegate.resources() {
                configurations.jboss.files
                    .collect { it.name }
                    .sort()
                    .each { 'resource-root'(path: it) }
            }
            delegate.dependencies() {
                moduleDependencies.each { module(name: it) }
            }
        }
    }

    new File(staging, "module.xml").withWriter(encoding) {
        XmlUtil.serialize(descriptor, it)
    }
}


/*
 * Packages the module so it can be unpacked directly in JBoss' module directory.
 */
assemble.dependsOn 'dist'
task(dist, type: Tar, dependsOn: [assembleModuleDependencies, createModuleDescriptor]) {
    from staging
    compression = Compression.GZIP
    rename {
        'modules/' + moduleName.replaceAll('\\.', '/') + "/$moduleSlot/$it"
    }
}


artifacts {
    archives dist
}

uploadArchives.dependsOn assemble

