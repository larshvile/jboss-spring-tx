/*
 * Provides a baseline script for creating JBoss modules.
 * https://docs.jboss.org/author/display/AS7/Class+Loading+in+AS7
 */
apply plugin: 'base'

defaultTasks 'clean', 'uploadArchives'

// verify that the moduleName/slot has been configured, need these to generate some folders
assert ext.has('moduleName')
assert ext.has('moduleSlot')

/*
 * Custom dependency configurations.
 */
configurations {
    jbossModule // dependency configuration for the module's contents
    jbossScript // .. and for init scripts that should be invoked after the module has been added
}

File moduleStagingDir = mkdir("${buildDir.name}/staging/modules/"
            + moduleName.replaceAll('\\.', '/')
            + "/$moduleSlot")

task assembleModuleDependencies(type: Copy) {
    from configurations.jbossModule
    into moduleStagingDir
}

/*
 * Generates the JBoss module descriptor.
 */
import groovy.xml.*
task createModuleDescriptor << {
    def encoding = 'UTF-8'

    def builder = new StreamingMarkupBuilder()
    builder.encoding = encoding

    def descriptor = builder.bind {
        mkp.xmlDeclaration()
        module(xmlns: 'urn:jboss:module:1.0', name: moduleName, slot: moduleSlot) {
            delegate.resources() {
                configurations.jbossModule.files
                    .collect { it.name }
                    .sort()
                    .each { 'resource-root'(path: it) }
            }
            delegate.dependencies() {
                moduleDependencies.each { name, props ->
                    module([
                        name: name,
                        export: props['export']
                    ].findAll { it.value })
                }
            }
        }
    }

    new File(moduleStagingDir, "module.xml").withWriter(encoding) {
        XmlUtil.serialize(descriptor, it)
    }
}

task copyScripts << {
    if (configurations.jbossScript.files.empty) {
        return
    }

    copy {
        from configurations.jbossScript.files
        into file("${buildDir.name}/staging/hulte-scripts/$moduleName")
    }
}


assemble.dependsOn 'dist'
task(dist, type: Tar, dependsOn: [assembleModuleDependencies, createModuleDescriptor, copyScripts]) {
    from file("${buildDir.name}/staging")
    compression = Compression.GZIP
}

artifacts {
    archives dist
}

uploadArchives.dependsOn assemble

